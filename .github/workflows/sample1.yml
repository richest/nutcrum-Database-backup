name: Backup and Upload MySQL Databases to S3

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

jobs:
  backup-and-upload:
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

    steps:
      - name: Set up MySQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Dump all MySQL databases individually
        run: |
          mkdir -p dumps
          DBS=$(mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SHOW DATABASES;" | grep -Ev "(Database|information_schema|performance_schema|mysql|sys)")
          for DB in $DBS; do
            echo "Dumping $DB"
            mysqldump -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD $DB > dumps/${DB}.sql
          done

      - name: Create tar.gz with current date and time
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          TAR_NAME="mysql_backup_$TIMESTAMP.tar.gz"
          tar -czf "$TAR_NAME" -C dumps .
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV

      - name: Upload backup to S3
        run: |
          aws s3 cp "$TAR_NAME" "s3://$S3_BUCKET_NAME/$TAR_NAME"

      - name: Delete local backup files after upload
        run: |
          rm -rf "$TAR_NAME" dumps/
          echo "Local backup files deleted."

      - name: Delete backups older than 2 days from S3
        run: |
          TWO_DAYS_AGO=$(date -u -d '2 days ago' +%Y-%m-%dT%H:%M:%SZ)
          aws s3api list-objects-v2 --bucket $S3_BUCKET_NAME \
            --query "Contents[?LastModified<='$TWO_DAYS_AGO'].Key" --output text |
          tr '\t' '\n' | while read key; do
            if [ ! -z "$key" ]; then
              echo "Deleting $key"
              aws s3 rm "s3://$S3_BUCKET_NAME/$key"
            fi
          done
